{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91777\\\\Desktop\\\\React\\\\gamehub\\\\src\\\\games\\\\MemoryGame.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Play } from 'lucide-react';\n\n// const generateCards = () => {\n//   const cardValues = Array.from({ length: 8 }, (_, i) => i + 1); // Create pairs of numbers 1-8\n//   const cards = [...cardValues, ...cardValues]; // Duplicate for pairs\n//   return cards.sort(() => Math.random() - 0.5); // Shuffle cards\n// };\n\n// function MemoryGame({ setSelectedGame, setGameMode }) {\n//   const [cards, setCards] = useState([]);\n//   const [flippedCards, setFlippedCards] = useState([]);\n//   const [matchedCards, setMatchedCards] = useState([]);\n//   const [isGameActive, setIsGameActive] = useState(false);\n\n//   useEffect(() => {\n//     if (isGameActive) {\n//       setCards(generateCards());\n//     }\n//   }, [isGameActive]);\n\n//   const handleCardClick = (index) => {\n//     if (flippedCards.length < 2 && !flippedCards.includes(index) && !matchedCards.includes(index)) {\n//       setFlippedCards((prev) => [...prev, index]);\n\n//       if (flippedCards.length === 1) {\n//         const firstCardIndex = flippedCards[0];\n//         const secondCardValue = cards[index];\n//         const firstCardValue = cards[firstCardIndex];\n\n//         if (firstCardValue === secondCardValue) {\n//           setMatchedCards((prev) => [...prev, firstCardIndex, index]);\n//         }\n\n//         setTimeout(() => {\n//           setFlippedCards([]);\n//         }, 1000);\n//       }\n//     }\n//   };\n\n//   const startNewGame = () => {\n//     setIsGameActive(true);\n//     setFlippedCards([]);\n//     setMatchedCards([]);\n//   };\n\n//   return (\n//     <div className=\"flex flex-col items-center justify-center p-8 bg-gradient-to-br from-yellow-100 to-orange-100 min-h-screen rounded-lg shadow-lg w-full max-w-lg mx-auto\">\n//       <h2 className=\"text-4xl font-extrabold text-gray-800 mb-6 tracking-wide\">Memory Game</h2>\n//       <p className=\"text-xl text-gray-700 mb-8\">\n//         Match pairs of cards in this classic memory challenge!\n//       </p>\n//       <div className=\"grid grid-cols-4 gap-4 bg-white p-6 rounded-xl shadow-xl\">\n//         {cards.map((value, idx) => (\n//           <div\n//             key={idx}\n//             onClick={() => handleCardClick(idx)}\n//             className={`w-24 h-24 rounded-lg flex items-center justify-center text-3xl font-bold text-indigo-700 shadow-md cursor-pointer transition-all duration-200 ${\n//               flippedCards.includes(idx) || matchedCards.includes(idx) ? 'bg-indigo-300' : 'bg-indigo-200'\n//             }`}\n//           >\n//             {flippedCards.includes(idx) || matchedCards.includes(idx) ? value : '?'}\n//           </div>\n//         ))}\n//       </div>\n//       <button\n//         onClick={startNewGame}\n//         className=\"mt-10 px-8 py-3 bg-gradient-to-r from-red-500 to-pink-600 text-white font-bold text-lg rounded-full shadow-lg hover:from-red-600 hover:to-pink-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300\"\n//       >\n//         Start New Game <Play className=\"inline-block ml-2 w-5 h-5\" />\n//       </button>\n//       <button\n//         onClick={() => { setSelectedGame(null); setGameMode(null); }}\n//         className=\"mt-4 px-8 py-3 bg-gray-600 text-white font-bold text-lg rounded-full shadow-lg hover:bg-gray-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300\"\n//       >\n//         Back to Mode Selection\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default MemoryGame;\n\nimport React, { useState, useEffect } from 'react';\nimport { Play, RotateCcw } from 'lucide-react'; // Added RotateCcw for reset button\n\n// Main App component that contains the Memory Game logic\n// It now accepts setSelectedGame and setGameMode as props to enable navigation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App({\n  setSelectedGame,\n  setGameMode\n}) {\n  _s();\n  // State for game logic\n  const [cards, setCards] = useState([]); // Array of card objects { id, value, isFlipped, isMatched }\n  const [flippedCards, setFlippedCards] = useState([]); // Stores indices of currently flipped cards\n  const [matchedCards, setMatchedCards] = useState([]); // Stores indices of matched cards\n  const [turns, setTurns] = useState(0); // Number of turns taken\n  const [gameOver, setGameOver] = useState(false); // Game over state\n  const [canFlip, setCanFlip] = useState(true); // Prevents flipping more than two cards at once\n\n  // Emojis for card values - these will be the images/symbols on the cards\n  const cardEmojis = ['🍎', '🍌', '🍇', '🍓', '🍍', '🥝', '🥭', '🍒'];\n\n  // Function to initialize or reset the game\n  const initializeGame = () => {\n    // Create pairs of emojis and shuffle them\n    const shuffledCards = [...cardEmojis, ...cardEmojis] // Duplicate the emojis to create pairs\n    .sort(() => Math.random() - 0.5) // Shuffle the array randomly\n    .map((emoji, index) => ({\n      id: index,\n      // Unique ID for each card instance (important for React keys)\n      value: emoji,\n      // The emoji displayed on the card\n      isFlipped: false,\n      // Tracks if the card is currently face-up\n      isMatched: false // Tracks if the card has been successfully matched\n    }));\n    setCards(shuffledCards); // Set the shuffled cards to state\n    setFlippedCards([]); // Clear any previously flipped cards\n    setMatchedCards([]); // Clear any previously matched cards\n    setTurns(0); // Reset turn count\n    setGameOver(false); // Reset game over state\n    setCanFlip(true); // Allow cards to be flipped\n  };\n\n  // useEffect hook to initialize the game when the component mounts\n  useEffect(() => {\n    initializeGame();\n  }, []); // The empty dependency array ensures this runs only once on mount\n\n  // useEffect hook to handle logic when two cards are flipped\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      setCanFlip(false); // Temporarily disable flipping to prevent more than two cards being flipped\n      const [firstIndex, secondIndex] = flippedCards; // Get the indices of the two flipped cards\n\n      // Check if the values of the two flipped cards match\n      if (cards[firstIndex].value === cards[secondIndex].value) {\n        // If cards match:\n        setMatchedCards(prev => [...prev, firstIndex, secondIndex]); // Add them to the matched cards array\n        setCards(prevCards => prevCards.map((card, index) => index === firstIndex || index === secondIndex ? {\n          ...card,\n          isMatched: true\n        } // Mark matched cards as 'isMatched'\n        : card));\n        setFlippedCards([]); // Clear the flipped cards array\n        setCanFlip(true); // Re-enable flipping\n      } else {\n        // If cards do not match:\n        // Flip them back after a short delay (1 second) so the user can see them\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map((card, index) => index === firstIndex || index === secondIndex ? {\n            ...card,\n            isFlipped: false\n          } // Flip them back face-down\n          : card));\n          setFlippedCards([]); // Clear the flipped cards array\n          setCanFlip(true); // Re-enable flipping\n        }, 1000); // 1-second delay\n      }\n      setTurns(prev => prev + 1); // Increment the turn counter after each pair of flips\n    }\n  }, [flippedCards, cards]); // This effect runs whenever `flippedCards` or `cards` state changes\n\n  // useEffect hook to check if the game is over (all cards matched)\n  useEffect(() => {\n    if (matchedCards.length === cards.length && cards.length > 0) {\n      setGameOver(true); // Set game over to true if all cards are matched\n    }\n  }, [matchedCards, cards]); // This effect runs whenever `matchedCards` or `cards` state changes\n\n  // Function to handle a card being clicked\n  const handleCardClick = index => {\n    // Prevent clicking if:\n    // - The game is already over\n    // - Flipping is temporarily disabled (e.g., waiting for a match check)\n    // - The card is already face-up\n    // - The card is already matched\n    if (gameOver || !canFlip || cards[index].isFlipped || cards[index].isMatched) {\n      return;\n    }\n\n    // Flip the clicked card face-up\n    setCards(prevCards => prevCards.map((card, i) => i === index ? {\n      ...card,\n      isFlipped: true\n    } : card));\n\n    // Add the index of the newly flipped card to the `flippedCards` array\n    setFlippedCards(prev => [...prev, index]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center p-8 bg-gradient-to-br from-yellow-100 to-orange-100 min-h-screen rounded-lg shadow-lg w-full max-w-lg mx-auto font-inter relative overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-4xl font-extrabold text-gray-800 mb-4 tracking-wide\",\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-xl text-gray-700 mb-6 text-center\",\n      children: \"Match pairs of cards in this classic memory challenge!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-2xl font-semibold text-gray-800 mb-6\",\n      children: [\"Turns: \", turns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-black bg-opacity-70 flex items-center justify-center z-10 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-8 rounded-xl shadow-2xl text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-5xl font-extrabold text-green-600 mb-4 animate-bounce\",\n          children: \"\\uD83C\\uDF89 You Won! \\uD83C\\uDF89\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-2xl text-gray-800 mb-6\",\n          children: [\"It took you \", turns, \" turns.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: initializeGame // Button to play again\n          ,\n          className: \"px-8 py-3 bg-gradient-to-r from-blue-500 to-cyan-600 text-white font-bold text-lg rounded-full shadow-lg hover:from-blue-600 hover:to-cyan-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 flex items-center justify-center mx-auto\",\n          children: [\"Play Again \", /*#__PURE__*/_jsxDEV(RotateCcw, {\n            className: \"inline-block ml-2 w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-4 bg-white p-6 rounded-xl shadow-xl border-4 border-yellow-300\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        // Unique key for each card in the list\n        className: `\n              w-24 h-24 sm:w-28 sm:h-28 md:w-32 md:h-32 lg:w-24 lg:h-24\n              bg-indigo-200 rounded-lg flex items-center justify-center\n              text-3xl sm:text-4xl md:text-5xl font-bold text-indigo-700\n              shadow-md cursor-pointer transition-all duration-300 transform\n              ${card.isFlipped || card.isMatched ? 'bg-indigo-400 scale-105' : 'hover:bg-indigo-300'}\n              ${card.isMatched ? 'opacity-50 pointer-events-none' : ''}\n            `,\n        onClick: () => handleCardClick(index) // Attach click handler to each card\n        ,\n        children: card.isFlipped || card.isMatched ? card.value : '?'\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initializeGame,\n      className: \"mt-10 px-8 py-3 bg-gradient-to-r from-red-500 to-pink-600 text-white font-bold text-lg rounded-full shadow-lg hover:from-red-600 hover:to-pink-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300 flex items-center justify-center\",\n      children: [\"Start New Game \", /*#__PURE__*/_jsxDEV(Play, {\n        className: \"inline-block ml-2 w-5 h-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        // These functions would be passed as props from a parent component\n        // that manages the overall game selection or modes.\n        if (setSelectedGame) setSelectedGame(null);\n        if (setGameMode) setGameMode(null);\n        console.log(\"Back button clicked\");\n      },\n      className: \"mt-4 px-8 py-3 bg-gray-600 text-white font-bold text-lg rounded-full shadow-lg hover:bg-gray-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300\",\n      children: \"Back to Mode Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"easPJPZya0giIF6/kJdgyu7S/t8=\");\n_c = App;\nexport default App; // Export App as the default component\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Play","RotateCcw","jsxDEV","_jsxDEV","App","setSelectedGame","setGameMode","_s","cards","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","turns","setTurns","gameOver","setGameOver","canFlip","setCanFlip","cardEmojis","initializeGame","shuffledCards","sort","Math","random","map","emoji","index","id","value","isFlipped","isMatched","length","firstIndex","secondIndex","prev","prevCards","card","setTimeout","handleCardClick","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","console","log","_c","$RefreshReg$"],"sources":["C:/Users/91777/Desktop/React/gamehub/src/games/MemoryGame.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Play } from 'lucide-react';\r\n\r\n// const generateCards = () => {\r\n//   const cardValues = Array.from({ length: 8 }, (_, i) => i + 1); // Create pairs of numbers 1-8\r\n//   const cards = [...cardValues, ...cardValues]; // Duplicate for pairs\r\n//   return cards.sort(() => Math.random() - 0.5); // Shuffle cards\r\n// };\r\n\r\n// function MemoryGame({ setSelectedGame, setGameMode }) {\r\n//   const [cards, setCards] = useState([]);\r\n//   const [flippedCards, setFlippedCards] = useState([]);\r\n//   const [matchedCards, setMatchedCards] = useState([]);\r\n//   const [isGameActive, setIsGameActive] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     if (isGameActive) {\r\n//       setCards(generateCards());\r\n//     }\r\n//   }, [isGameActive]);\r\n\r\n//   const handleCardClick = (index) => {\r\n//     if (flippedCards.length < 2 && !flippedCards.includes(index) && !matchedCards.includes(index)) {\r\n//       setFlippedCards((prev) => [...prev, index]);\r\n\r\n//       if (flippedCards.length === 1) {\r\n//         const firstCardIndex = flippedCards[0];\r\n//         const secondCardValue = cards[index];\r\n//         const firstCardValue = cards[firstCardIndex];\r\n\r\n//         if (firstCardValue === secondCardValue) {\r\n//           setMatchedCards((prev) => [...prev, firstCardIndex, index]);\r\n//         }\r\n\r\n//         setTimeout(() => {\r\n//           setFlippedCards([]);\r\n//         }, 1000);\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const startNewGame = () => {\r\n//     setIsGameActive(true);\r\n//     setFlippedCards([]);\r\n//     setMatchedCards([]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col items-center justify-center p-8 bg-gradient-to-br from-yellow-100 to-orange-100 min-h-screen rounded-lg shadow-lg w-full max-w-lg mx-auto\">\r\n//       <h2 className=\"text-4xl font-extrabold text-gray-800 mb-6 tracking-wide\">Memory Game</h2>\r\n//       <p className=\"text-xl text-gray-700 mb-8\">\r\n//         Match pairs of cards in this classic memory challenge!\r\n//       </p>\r\n//       <div className=\"grid grid-cols-4 gap-4 bg-white p-6 rounded-xl shadow-xl\">\r\n//         {cards.map((value, idx) => (\r\n//           <div\r\n//             key={idx}\r\n//             onClick={() => handleCardClick(idx)}\r\n//             className={`w-24 h-24 rounded-lg flex items-center justify-center text-3xl font-bold text-indigo-700 shadow-md cursor-pointer transition-all duration-200 ${\r\n//               flippedCards.includes(idx) || matchedCards.includes(idx) ? 'bg-indigo-300' : 'bg-indigo-200'\r\n//             }`}\r\n//           >\r\n//             {flippedCards.includes(idx) || matchedCards.includes(idx) ? value : '?'}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//       <button\r\n//         onClick={startNewGame}\r\n//         className=\"mt-10 px-8 py-3 bg-gradient-to-r from-red-500 to-pink-600 text-white font-bold text-lg rounded-full shadow-lg hover:from-red-600 hover:to-pink-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300\"\r\n//       >\r\n//         Start New Game <Play className=\"inline-block ml-2 w-5 h-5\" />\r\n//       </button>\r\n//       <button\r\n//         onClick={() => { setSelectedGame(null); setGameMode(null); }}\r\n//         className=\"mt-4 px-8 py-3 bg-gray-600 text-white font-bold text-lg rounded-full shadow-lg hover:bg-gray-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300\"\r\n//       >\r\n//         Back to Mode Selection\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default MemoryGame;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Play, RotateCcw } from 'lucide-react'; // Added RotateCcw for reset button\r\n\r\n// Main App component that contains the Memory Game logic\r\n// It now accepts setSelectedGame and setGameMode as props to enable navigation\r\nfunction App({ setSelectedGame, setGameMode }) {\r\n  // State for game logic\r\n  const [cards, setCards] = useState([]); // Array of card objects { id, value, isFlipped, isMatched }\r\n  const [flippedCards, setFlippedCards] = useState([]); // Stores indices of currently flipped cards\r\n  const [matchedCards, setMatchedCards] = useState([]); // Stores indices of matched cards\r\n  const [turns, setTurns] = useState(0); // Number of turns taken\r\n  const [gameOver, setGameOver] = useState(false); // Game over state\r\n  const [canFlip, setCanFlip] = useState(true); // Prevents flipping more than two cards at once\r\n\r\n  // Emojis for card values - these will be the images/symbols on the cards\r\n  const cardEmojis = ['🍎', '🍌', '🍇', '🍓', '🍍', '🥝', '🥭', '🍒'];\r\n\r\n  // Function to initialize or reset the game\r\n  const initializeGame = () => {\r\n    // Create pairs of emojis and shuffle them\r\n    const shuffledCards = [...cardEmojis, ...cardEmojis] // Duplicate the emojis to create pairs\r\n      .sort(() => Math.random() - 0.5) // Shuffle the array randomly\r\n      .map((emoji, index) => ({\r\n        id: index, // Unique ID for each card instance (important for React keys)\r\n        value: emoji, // The emoji displayed on the card\r\n        isFlipped: false, // Tracks if the card is currently face-up\r\n        isMatched: false, // Tracks if the card has been successfully matched\r\n      }));\r\n\r\n    setCards(shuffledCards); // Set the shuffled cards to state\r\n    setFlippedCards([]); // Clear any previously flipped cards\r\n    setMatchedCards([]); // Clear any previously matched cards\r\n    setTurns(0); // Reset turn count\r\n    setGameOver(false); // Reset game over state\r\n    setCanFlip(true); // Allow cards to be flipped\r\n  };\r\n\r\n  // useEffect hook to initialize the game when the component mounts\r\n  useEffect(() => {\r\n    initializeGame();\r\n  }, []); // The empty dependency array ensures this runs only once on mount\r\n\r\n  // useEffect hook to handle logic when two cards are flipped\r\n  useEffect(() => {\r\n    if (flippedCards.length === 2) {\r\n      setCanFlip(false); // Temporarily disable flipping to prevent more than two cards being flipped\r\n      const [firstIndex, secondIndex] = flippedCards; // Get the indices of the two flipped cards\r\n\r\n      // Check if the values of the two flipped cards match\r\n      if (cards[firstIndex].value === cards[secondIndex].value) {\r\n        // If cards match:\r\n        setMatchedCards((prev) => [...prev, firstIndex, secondIndex]); // Add them to the matched cards array\r\n        setCards((prevCards) =>\r\n          prevCards.map((card, index) =>\r\n            index === firstIndex || index === secondIndex\r\n              ? { ...card, isMatched: true } // Mark matched cards as 'isMatched'\r\n              : card\r\n          )\r\n        );\r\n        setFlippedCards([]); // Clear the flipped cards array\r\n        setCanFlip(true); // Re-enable flipping\r\n      } else {\r\n        // If cards do not match:\r\n        // Flip them back after a short delay (1 second) so the user can see them\r\n        setTimeout(() => {\r\n          setCards((prevCards) =>\r\n            prevCards.map((card, index) =>\r\n              index === firstIndex || index === secondIndex\r\n                ? { ...card, isFlipped: false } // Flip them back face-down\r\n                : card\r\n            )\r\n          );\r\n          setFlippedCards([]); // Clear the flipped cards array\r\n          setCanFlip(true); // Re-enable flipping\r\n        }, 1000); // 1-second delay\r\n      }\r\n      setTurns((prev) => prev + 1); // Increment the turn counter after each pair of flips\r\n    }\r\n  }, [flippedCards, cards]); // This effect runs whenever `flippedCards` or `cards` state changes\r\n\r\n  // useEffect hook to check if the game is over (all cards matched)\r\n  useEffect(() => {\r\n    if (matchedCards.length === cards.length && cards.length > 0) {\r\n      setGameOver(true); // Set game over to true if all cards are matched\r\n    }\r\n  }, [matchedCards, cards]); // This effect runs whenever `matchedCards` or `cards` state changes\r\n\r\n  // Function to handle a card being clicked\r\n  const handleCardClick = (index) => {\r\n    // Prevent clicking if:\r\n    // - The game is already over\r\n    // - Flipping is temporarily disabled (e.g., waiting for a match check)\r\n    // - The card is already face-up\r\n    // - The card is already matched\r\n    if (gameOver || !canFlip || cards[index].isFlipped || cards[index].isMatched) {\r\n      return;\r\n    }\r\n\r\n    // Flip the clicked card face-up\r\n    setCards((prevCards) =>\r\n      prevCards.map((card, i) =>\r\n        i === index ? { ...card, isFlipped: true } : card\r\n      )\r\n    );\r\n\r\n    // Add the index of the newly flipped card to the `flippedCards` array\r\n    setFlippedCards((prev) => [...prev, index]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center p-8 bg-gradient-to-br from-yellow-100 to-orange-100 min-h-screen rounded-lg shadow-lg w-full max-w-lg mx-auto font-inter relative overflow-hidden\">\r\n      <h2 className=\"text-4xl font-extrabold text-gray-800 mb-4 tracking-wide\">Memory Game</h2>\r\n      <p className=\"text-xl text-gray-700 mb-6 text-center\">\r\n        Match pairs of cards in this classic memory challenge!\r\n      </p>\r\n\r\n      {/* Display the current number of turns */}\r\n      <div className=\"text-2xl font-semibold text-gray-800 mb-6\">Turns: {turns}</div>\r\n\r\n      {/* Game Over Overlay - Appears when all cards are matched */}\r\n      {gameOver && (\r\n        <div className=\"absolute inset-0 bg-black bg-opacity-70 flex items-center justify-center z-10 rounded-lg\">\r\n          <div className=\"bg-white p-8 rounded-xl shadow-2xl text-center\">\r\n            <h3 className=\"text-5xl font-extrabold text-green-600 mb-4 animate-bounce\">🎉 You Won! 🎉</h3>\r\n            <p className=\"text-2xl text-gray-800 mb-6\">It took you {turns} turns.</p>\r\n            <button\r\n              onClick={initializeGame} // Button to play again\r\n              className=\"px-8 py-3 bg-gradient-to-r from-blue-500 to-cyan-600 text-white font-bold text-lg rounded-full shadow-lg hover:from-blue-600 hover:to-cyan-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300 flex items-center justify-center mx-auto\"\r\n            >\r\n              Play Again <RotateCcw className=\"inline-block ml-2 w-5 h-5\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Grid for the memory game cards */}\r\n      <div className=\"grid grid-cols-4 gap-4 bg-white p-6 rounded-xl shadow-xl border-4 border-yellow-300\">\r\n        {cards.map((card, index) => (\r\n          <div\r\n            key={card.id} // Unique key for each card in the list\r\n            className={`\r\n              w-24 h-24 sm:w-28 sm:h-28 md:w-32 md:h-32 lg:w-24 lg:h-24\r\n              bg-indigo-200 rounded-lg flex items-center justify-center\r\n              text-3xl sm:text-4xl md:text-5xl font-bold text-indigo-700\r\n              shadow-md cursor-pointer transition-all duration-300 transform\r\n              ${card.isFlipped || card.isMatched ? 'bg-indigo-400 scale-105' : 'hover:bg-indigo-300'}\r\n              ${card.isMatched ? 'opacity-50 pointer-events-none' : ''}\r\n            `}\r\n            onClick={() => handleCardClick(index)} // Attach click handler to each card\r\n          >\r\n            {/* Display emoji if flipped or matched, otherwise display '?' */}\r\n            {card.isFlipped || card.isMatched ? card.value : '?'}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Button to start a new game manually */}\r\n      <button\r\n        onClick={initializeGame}\r\n        className=\"mt-10 px-8 py-3 bg-gradient-to-r from-red-500 to-pink-600 text-white font-bold text-lg rounded-full shadow-lg hover:from-red-600 hover:to-pink-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300 flex items-center justify-center\"\r\n      >\r\n        Start New Game <Play className=\"inline-block ml-2 w-5 h-5\" />\r\n      </button>\r\n\r\n      {/* Button to go back to mode selection */}\r\n      <button\r\n        onClick={() => {\r\n          // These functions would be passed as props from a parent component\r\n          // that manages the overall game selection or modes.\r\n          if (setSelectedGame) setSelectedGame(null);\r\n          if (setGameMode) setGameMode(null);\r\n          console.log(\"Back button clicked\");\r\n        }}\r\n        className=\"mt-4 px-8 py-3 bg-gray-600 text-white font-bold text-lg rounded-full shadow-lg hover:bg-gray-700 transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-gray-300\"\r\n      >\r\n        Back to Mode Selection\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; // Export App as the default component\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}